name: Fetch Instagram (Graph API)

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Sync with remote
        run: |
          git fetch origin
          git reset --hard origin/main

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Verify IG access token
        env:
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
          IG_USER_ID: ${{ secrets.IG_USER_ID }}
        run: |
          set -eux
          if [ -z "${IG_ACCESS_TOKEN}" ]; then
            echo "Error: IG_ACCESS_TOKEN secret is not set"; exit 1;
          fi
          echo "Checking token owner (me):"
          verify_code=$(curl -s -o /tmp/verify.json -w "%{http_code}" "https://graph.facebook.com/v24.0/me?access_token=${IG_ACCESS_TOKEN}")
          if [ "$verify_code" -ne 200 ]; then
            echo "Graph API token check returned HTTP $verify_code";
            cat /tmp/verify.json | jq .;
            exit 1;
          fi
          # show the returned JSON and check the id
          cat /tmp/verify.json | jq .
          owner_id=$(jq -r '.id' /tmp/verify.json)
          if [ -n "${IG_USER_ID}" ] && [ "${IG_USER_ID}" != "${owner_id}" ]; then
            echo "Warning: provided IG_USER_ID (${IG_USER_ID}) does not match token owner (${owner_id}).";
            echo "Make sure you use the Instagram Business Account ID that the token belongs to.";
            # Do not exit here, but alert the user
          fi

      - name: Fetch Instagram media via Graph API
        env:
          IG_USER_ID: ${{ secrets.IG_USER_ID }}
          IG_ACCESS_TOKEN: ${{ secrets.IG_ACCESS_TOKEN }}
        run: |
          set -eux
          mkdir -p data
          # Determine target IG user id to use
          target_ig_id="${IG_USER_ID}"
          if [ -z "${target_ig_id}" ] || [ "${target_ig_id}" = "null" ]; then
            echo "IG_USER_ID not set â€” attempting to detect from connected Pages..."
            target_ig_id=$(curl -s "https://graph.facebook.com/v24.0/me/accounts?fields=instagram_business_account&access_token=${IG_ACCESS_TOKEN}" | jq -r '.data[]?.instagram_business_account.id' | head -n1)
            if [ -z "${target_ig_id}" ] || [ "${target_ig_id}" = "null" ]; then
              echo "Could not detect an Instagram Business Account ID from pages connected to this token. Please set the 'IG_USER_ID' secret to the Instagram account id.";
              echo "Dump of /me/accounts response:";
              curl -s "https://graph.facebook.com/v24.0/me/accounts?fields=instagram_business_account&access_token=${IG_ACCESS_TOKEN}" | jq . || true;
              exit 1;
            fi
            echo "Detected IG user id: ${target_ig_id}"
          fi

          # Verify that the detected ID is reachable with the token
          verify_code=$(curl -s -o /tmp/target.json -w "%{http_code}" "https://graph.facebook.com/v24.0/${target_ig_id}?fields=id,username&access_token=${IG_ACCESS_TOKEN}")
          if [ "$verify_code" -ne 200 ]; then
            echo "Failed to verify IG user id ${target_ig_id} (HTTP $verify_code)";
            cat /tmp/target.json | jq . || true;
            exit 1;
          fi
          echo "Fetching media for IG user id: ${target_ig_id}"
          URL_PATH="/${target_ig_id}/media?fields=id,caption,media_type,media_url,thumbnail_url,permalink,timestamp,children{media_url,thumbnail_url,media_type}&limit=6"
          http_code=$(curl -s -o data/instagram-raw.json -w "%{http_code}" "https://graph.facebook.com/v24.0${URL_PATH}&access_token=${IG_ACCESS_TOKEN}")
          if [ "$http_code" -ne 200 ]; then
            echo "Graph API returned HTTP $http_code";
            echo "Response body:";
            cat data/instagram-raw.json | jq . || true;
            exit 1;
          fi
          # Use jq to transform the raw response into the minimal JSON our site expects
          jq '{items: .data | map({id: .id, caption: (.caption // ""), image: (if .media_type == "VIDEO" then (.thumbnail_url // .media_url) elif .media_type == "CAROUSEL_ALBUM" then (.children.data[0].media_url // .media_url // .thumbnail_url) else .media_url end), link: .permalink, timestamp: .timestamp}) | sort_by(.timestamp) | reverse | .[:3]}' data/instagram-raw.json > data/instagram.json

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/instagram.json
          git commit -m "Update Instagram feed" || echo "No changes to commit"
          git push
